%ex1_2は実験1の難しい組み合わせ（tigerとleopard）の分類実験

%ファイル名読み込み
load('list.mat');
load('classlist.mat');

%Bofベクトルの全体の作成
tiger_start = 200;
leopard_start = 0;
n=100;%画像枚数
create_bof_dict_all(list, tiger_start,leopard_start,n);

load('codebook.mat');
load('bof.mat');

%5-fold cross validationを用いた学習と評価
%cv用の変数
idx=[1:n];
cv=5;
color_ac_all=[];
bof_ac_all=[];
dcnn_linear_ac_all=[];
dcnn_vgg16_linear_ac_all=[];
dcnn_nonlinear_ac_all=[];

for i=1:cv 
  %train, evalに使うindexの抽出
  train_pos=find(mod(idx,cv)~=(i-1));
  eval_pos =find(mod(idx,cv)==(i-1));
  train_neg=find(mod(idx,cv)~=(i-1));
  eval_neg =find(mod(idx,cv)==(i-1));
  %positiveがtiger
  train_pos = train_pos + tiger_start;
  eval_pos = eval_pos + tiger_start;
  %negativeがleopard
  train_neg = train_neg + leopard_start;
  eval_neg = eval_neg + leopard_start;

  %indexとlabelの生成
  train_index=[train_pos train_neg];
  eval_index=[eval_pos eval_neg];
  train_labels=[ones(numel(train_pos),1); ones(numel(train_neg),1)*(-1)];
  eval_labels =[ones(numel(eval_pos),1); ones(numel(eval_neg),1)*(-1)];
  
  %%%% カラーヒストグラムと線型SVM %%%%
  fprintf('start color hist')
  %カラーヒストグラムの作成（学習用）
  color_hist_dict_train = get_color_hist_dict(list, train_index);
  %線形SVMでの学習
  %color_linear_model = svm_train('linear',color_hist_dict_train,train_labels);
  color_linear_model = fitcsvm(color_hist_dict_train, train_labels,'KernelFunction','linear'); 
  %カラーヒストグラムの作成（推論用）
  color_hist_dict_eval = get_color_hist_dict(list, eval_index);
  %線形SVMでの推論
  %[color_labels, color_scores] = svm_eval(color_linear_model, color_hist_dict_eval);
  [color_labels, color_scores] = predict(color_linear_model, color_hist_dict_eval);
  color_accuracy = get_accuracy(color_labels, eval_labels);
  color_ac_all=[color_ac_all color_accuracy];
  %最後の場合結果をテキストに吐き出す
  if i ==cv
    save_highest_images_classify("result_2/color", list, color_scores, color_labels, eval_labels, eval_index);
  end
  %%%% BoFベクトルと非線形SVM %%%%
  fprintf('start bof')
  %Bofベクトルの作成（学習）
  bof_dict_train = get_bof_dict(bof, train_index,80,n,tiger_start,leopard_start);
  %非線形SVMでの学習
  %bof_nonlinear_model = svm_train('rbf',bof_dict_train,train_labels);
  bof_nonlinear_model = fitcsvm(bof_dict_train, train_labels,'KernelFunction','rbf'); 
  %Bofベクトルの作成（推論）
  bof_dict_eval = get_bof_dict(bof, eval_index, 20,n,tiger_start,leopard_start);
  %非線形SVMでの推論
  %[bof_labels, bof_scores] = svm_eval(bof_nonlinear_model, bof_dict_eval);
  [bof_labels, bof_scores] = predict(bof_nonlinear_model, bof_dict_eval);
  bof_accuracy = get_accuracy(bof_labels, eval_labels);
  bof_ac_all=[bof_ac_all bof_accuracy];
  %最後の場合結果をテキストに吐き出す
   if i ==cv
    save_highest_images_classify("result_2/bof", list, bof_scores, bof_labels, eval_labels,eval_index);
   end
  %%%% DCNN(alexnet)と線形SVM %%%%
  fprintf('start DCNN')
  %DCNN特徴量（alexnet）の作成（学習）
  dcnn_dict_train = get_dcnn_dict(list,train_index);
  %線形SVMでの学習
  %dcnn_linear_model = svm_train('linear',dcnn_dict_train,train_labels);
  dcnn_linear_model = fitcsvm(dcnn_dict_train, train_labels,'KernelFunction','linear'); 
  %DCNN特徴量（alexnet）の作成（推論）
  dcnn_linear_dict_eval = get_dcnn_dict(list,eval_index);
  %線形SVMでの推論
  %[dcnn_linear_labels, dcnn_linear_scores] = svm_eval(dcnn_linear_model, dcnn_linear_dict_eval);
  [dcnn_linear_labels, dcnn_linear_scores] = predict(dcnn_linear_model,dcnn_linear_dict_eval);
  dcnn_linear_accuracy = get_accuracy(dcnn_linear_labels, eval_labels);
  dcnn_linear_ac_all=[dcnn_linear_ac_all dcnn_linear_accuracy];
  %最後の場合結果をテキストに吐き出す
  if i ==cv
    save_highest_images_classify("result_2/dcnn_linear", list, dcnn_linear_scores, dcnn_linear_labels, eval_labels,eval_index);
  end
  %%%% DCNN(vgg16)と線形SVM %%%%
  fprintf('start vgg16')
  %DCNN特徴量（vgg16）の作成（学習）
  dcnn_vgg16_dict_train = get_dcnn_dict_vgg16(list,train_index);
  %線形SVMでの学習
  %dcnn_vgg16_linear_model = svm_train('linear',dcnn_vgg16_dict_train,train_labels);
  dcnn_vgg16_linear_model = fitcsvm(dcnn_vgg16_dict_train, train_labels,'KernelFunction','linear'); 
  %DCNN特徴量（vgg16）の作成（推論）
  dcnn_vgg16_linear_dict_eval = get_dcnn_dict_vgg16(list,eval_index);
  %線形SVMでの推論
  %[dcnn_vgg16_linear_labels, dcnn_vgg16_linear_scores] = svm_eval(dcnn_vgg16_linear_model, dcnn_vgg16_linear_dict_eval);
  [dcnn_vgg16_linear_labels, dcnn_vgg16_linear_scores] = predict(dcnn_vgg16_linear_model, dcnn_vgg16_linear_dict_eval);
  dcnn_vgg16_linear_accuracy = get_accuracy(dcnn_vgg16_linear_labels, eval_labels);
  dcnn_vgg16_linear_ac_all=[dcnn_vgg16_linear_ac_all dcnn_vgg16_linear_accuracy];
  %最後の場合結果をテキストに吐き出す
  if i ==cv
    save_highest_images_classify("result_2/dcnn_vgg16_linear", list, dcnn_vgg16_linear_scores, dcnn_vgg16_linear_labels, eval_labels,eval_index);
  end

  %%%% DCNN(alexnet)と非線形SVM %%%%
  fprintf('start dcnn2')
  %DCNN特徴量は事前に作成済み
  %非線形SVMでの学習
  %dcnn_nonlinear_model = svm_train('rbf',dcnn_dict_train,train_labels);
  dcnn_nonlinear_model = fitcsvm(dcnn_dict_train, train_labels,'KernelFunction','rbf'); 
  %非線形SVMでの推論
  %[dcnn_nonlinear_labels, dcnn_nonlinear_scores] = svm_eval(dcnn_nonlinear_model, dcnn_linear_dict_eval);
  [dcnn_nonlinear_labels, dcnn_nonlinear_scores] = predict(dcnn_nonlinear_model, dcnn_linear_dict_eval);
  dcnn_nonlinear_accuracy = get_accuracy(dcnn_nonlinear_labels, eval_labels);
  dcnn_nonlinear_ac_all=[dcnn_nonlinear_ac_all dcnn_nonlinear_accuracy];
  %最後の場合結果をテキストに吐き出す
  if i ==cv
    save_highest_images_classify("result_2/dcnn_nonlinear", list, dcnn_nonlinear_scores, dcnn_nonlinear_labels, eval_labels,eval_index);

  end
end

% 正解の表示
fprintf('accuracy color: %f\n',mean(color_ac_all))
fprintf('accuracy bof: %f\n',mean(bof_ac_all))
fprintf('accuracy alexnet linear: %f\n',mean(dcnn_linear_ac_all))
fprintf('accuracy vgg16 linear: %f\n',mean(dcnn_vgg16_linear_ac_all))
fprintf('accuracy alexnet nonlinear: %f\n',mean(dcnn_nonlinear_ac_all))



function [accuracy] = get_accuracy(predict_labels, eval_labels)
%予測ラベルと推論の正解ラベルからaccuracyを出す
correct_num = numel(find(predict_labels == eval_labels));
accuracy = correct_num / numel(predict_labels);
end
